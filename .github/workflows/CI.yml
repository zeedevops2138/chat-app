name: Chat-App CI Pipeline workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_TAG: ${{ github.sha }}
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      # 1Ô∏è‚É£ Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          npm ci

      # 4Ô∏è‚É£ OWASP Dependency Check
      - name: OWASP Dependency Check
        run: |
          cd ${{ matrix.service }}
          npx depcheck || echo "Dependency check completed"

      # 5Ô∏è‚É£ Build Artifacts
      - name: Build Artifacts
        run: |
          cd ${{ matrix.service }}
          if [ "${{ matrix.service }}" == "frontend" ]; then
            npm run build
            mkdir -p ../artifacts/frontend
            mv dist ../artifacts/frontend
          else
            mkdir -p ../artifacts/backend
            cp -r * ../artifacts/backend/
          fi

      # 5Ô∏è‚É£a Set short SHA for Docker tags
      - name: Set short SHA
        run: echo "IMAGE_TAG_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # 6Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::880420039188:role/GitHubActions-ECR-Role
          aws-region: ${{ secrets.AWS_REGION }}

      # 7Ô∏è‚É£ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Check And Create Repository on ECR
      - name: Create ECR repository if it doesn't exist
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          aws ecr describe-repositories --repository-names ${{ matrix.service }} || \
          aws ecr create-repository --repository-name ${{ matrix.service }}

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 8Ô∏è‚É£ Build Docker Image
      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.service }}:${{ env.IMAGE_TAG_SHORT }} ./${{ matrix.service }}

      # 9Ô∏è‚É£ Tag Docker Image for ECR & Docker Hub
      - name: Tag Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker tag ${{ matrix.service }}:${{ env.IMAGE_TAG_SHORT }} $ECR_REGISTRY/${{ matrix.service }}:${{ env.IMAGE_TAG_SHORT }}
          docker tag ${{ matrix.service }}:${{ env.IMAGE_TAG_SHORT }} ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ env.IMAGE_TAG_SHORT }}

      # üîü Push Docker Image
      - name: Push Docker image to ECR and Docker Hub
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker push $ECR_REGISTRY/${{ matrix.service }}:${{ env.IMAGE_TAG_SHORT }}
          docker push ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ env.IMAGE_TAG_SHORT }}

      # 1Ô∏è‚É£1Ô∏è‚É£ Trivy Scan
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:${{ env.IMAGE_TAG_SHORT }}
          format: 'table'

  # 1Ô∏è‚É£2Ô∏è‚É£ Update Helm Chart Values
  update-helm:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Helm values.yaml with new Docker tags
        env:
         IMAGE_TAG_SHORT: ${{ github.sha }}  # we‚Äôll slice in bash
        run: |
         IMAGE_TAG_SHORT=${GITHUB_SHA::7}
         echo "Using IMAGE_TAG_SHORT=$IMAGE_TAG_SHORT"
    
         sed -i "s|frontend.image.tag:.*|frontend.image.tag: $IMAGE_TAG_SHORT|" chatapp-helm-charts/values.yaml
         sed -i "s|backend.image.tag:.*|backend.image.tag: $IMAGE_TAG_SHORT|" chatapp-helm-charts/values.yaml
 
       
      - name: Push Helm changes to GitHub
        env:
         GH_PAT: ${{ secrets.GH_PAT }}
        run: |
         git config user.name "github-actions"
         git config user.email "github-actions@github.com"
         git add chatapp-helm-charts/values.yaml
         git diff --cached --exit-code || git commit -m "Update Docker image tags to $IMAGE_TAG_SHORT from CI/CD pipeline"
         git push origin main
