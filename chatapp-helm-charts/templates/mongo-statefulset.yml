apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "chatapp.fullname" . }}-mongo
  namespace: {{ .Values.namespace | default "chat-app" }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  serviceName: {{ include "chatapp.fullname" . }}-mongo-service
  replicas: {{ .Values.mongo.replicas | default 1 }}
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongodb
          image: "{{ .Values.mongo.image.repository }}:{{ .Values.mongo.image.tag }}"
          ports:
            - containerPort: {{ .Values.mongo.port }}
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongo.secret.name }}
                  key: MONGO_INITDB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongo.secret.name }}
                  key: MONGO_INITDB_ROOT_PASSWORD
          volumeMounts:
            - name: mongo-volume
              mountPath: /data/db
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {{- toYaml .Values.mongo.resources | nindent 12 }}
      volumes:
        - name: mongo-volume
          persistentVolumeClaim:
            claimName: {{ .Values.mongo.storage.pvcName }}
